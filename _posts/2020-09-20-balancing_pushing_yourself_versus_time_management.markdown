---
layout: post
title:      "Balancing Pushing Yourself Versus Time Management"
date:       2020-09-20 23:22:26 +0000
permalink:  balancing_pushing_yourself_versus_time_management
---


One of the core tenets pushed in this program is to become comfortable with pushing yourself and getting outside of your comfort zone to learn. I've certainly had to make use of that lesson throughout this course, and I've tried to dedicate myself to getting more comfortable with being uncomfortable for that reason. The effects have been incredibly valuable, though they existed in somewhat of a vacuum; while it was technically recommended that we completed a certain amount of lessons/objectives per day to stay on track, the labs that we were working on came with AAQ assistance and tests designed to lead us to particular solutions. 

The CLI project we were tasked to create had us come up with a program from scratch. We still had access to resources along the way (video tutorials, other students, and office hours—all of which were indispensable), but the tone shifted. One of the greatest differences I dealt with was the concrete deadline. There would be no playing catch-up on the weekend; everything absolutely had to be completed and submitted by a certain time. With this in mind, the playing field changes. The project at its core now likely becomes something out of the comfort zone of most students rather than individual sections within it, and with limited office hours and strange new bugs related to creating a program from scratch, the stress is quick to mount.

In my journey with the CLI project, I've had a few setbacks and strange bugs that took some time to figure out, but the most significant of all my issues came in the first week. I attended the first office hours meeting on Tuesday and shared my idea for my project wherein I would utilize scraping. Another student who had initially envisioned a similar path but ended up with a different idea entirely recommended an API that they had found; and having remembered another student's suggestion that working with APIs was easier than scraping as well as my own personal aversion to scraping, I looked into the API and resolved to use it.

There were a few issues with this. For one thing, I didn't have as much practice with working with APIs as I did scraping; I figured that this would *be* my practice and decided to pursue it despite familiar trepidation. The more damning of circumstances was that the API in question had to be called upon with a Ruby gem that I was unfamiliar with. Still, I tried to persevere; I tried to read past labs, documentation from the API and the gem itself, and watched what limited videos were available. Long story short, I lasted until Friday and got absolutely nothing done: I couldn't figure out how to work with either the gem or the API and had nothing to show for my struggles other than a pervading sense of panic.

I messaged my cohort lead about my struggles and detailed what had gotten me to that place. While I was typing it out to her, I realized that I had to be realistic about my expectations with the project and my own limitations; while I had been doing a lot of learning the past few months, I was now facing a strict and unmovable deadline. The circumstances had changed, and while before I had had the seeming luxury of being able to figure things out at my own pace, I had now been stuck on this one issue for four days—which was over a quarter of the time that we were meant to have available. 

While it's important not to be allergic to learning, it's also important not to fall prey to things like stubbornness or the sunk cost fallacy. I could have attempted trying to brute force my way into making things "work"—it can be tough to accept that you may need to rework your approach when you've already put so much time/effort into it. No one likes feeling as though their work up until the present point has been meaningless or worthless. But as programmers and students, we need to be honest with ourselves about what's within our realm of knowledge and what isn't. Pushing yourself is important, but the time you're working for a client isn't necessarily the time to be experimenting. Learning, of course, is inevitable; but sometimes solving a problem is understanding when and how you're not being productive.

For my personal experience with this project, I had to be honest about what I could do; working with that particular gem and API was not one of them. Actually speaking with someone about my struggles made me realize how ridiculous it was, so I'm glad that I was honest about my difficulties; that led to my executive decision to stick to something that I knew I could get to work and get things completed on time. Actual results were more important than any pride lost or stubbornness maintained. 

I'm glad that I had the perseverance to try and understand something past the point of comfort, but I'm more thankful for the perseverance to get through and complete the project on less time than I should have been able to afford myself. It's a delicate balancing act, but I'm glad to be out on the other side with everything functional and submitted—though I know I won't be able to help but go back and refactor or change things within the code before the project interview. 
