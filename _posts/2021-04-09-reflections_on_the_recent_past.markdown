---
layout: post
title:      "Reflections on the Recent Past"
date:       2021-04-09 19:52:38 +0000
permalink:  reflections_on_the_recent_past
---


For a good long while after opening the draft for this blog post for the first time, I was absolutely stumped on what to write. Every module that we've undertaken in Flatiron have been challenging—the new material is something on its own, but in learning coding for the first time we're also learning about new ways of perceiving, interpreting, and visualizing the world. As someone who comes from an artistic background, I've taken classes on doing this in a literal sense. Life drawing is highly technical compared to the doodles and uninhibited lines that filled my personal sketchbooks. In its most basic sense, life drawing requires you to break down things into measurements. This is how I was taught to start: claim your spot, set up your easel, and make the first marks on the paper a horizontal line at the top and the bottom. These represent the bounds of the human figure you're about to draw: the top line is the highest point of the body and the bottom is the lowest, typically the crown of the head and the feet in basic standing poses. 

The process of setting up a life drawing is similar to the process of coding: you have your constraints in what you're hoping to accomplish and what is vital to the end product, but the struggle is in getting there. This can be a horrendously clunky experience if you're new to the medium, let alone if you're learning the concepts for the first time. Most people inexperienced with life drawing can't tell you what a bony landmark is, and those inexperienced with coding concepts can't explain the most effective MVC design flow. In both cases, learning the skills and concepts of both is a challenging endeavor: breaking down the process can be similar, though it's not always a perfect metaphor. In strict life drawing, you know what you're trying to accomplish from the beginning. In programming, you first have to visualize the end product and its backbones before you can figure out what you need to do to make it reality.

At this point, programming becomes more like setting up an illustration. First still comes figuring out your constraints, but then you're left with a variety of choices of how to achieve your end product. In illustration, this often begins with thumbnailing; programming is more abstract in your start points, but you can do something similar in sketching what you want your website to look like or jotting down shorthand to figure out what models and relationships you want to include, or any number of things. This approach to design is how I first figured out my project: my conceptual stages tend to look like a jumbled collection of short notes and MS Paint sketches. These obviously aren't webpages or actual code, so they differ in function and practice than the final result, but I find myself referring back to these tiny scraps multiple times. 

From there comes the beginning of actual structure, usually in the form of basic files in which to contain your code. You can consider this the foundational sketch: shapes with very little definition that plot out the gesture and location of the illustration to be. From there it's about refinement, which is where the bulk of the work comes in both in illustration and programming. Mistakes happen, bugs happen, and new ideas spring up which then produce their own mistakes and bugs. This part can be broken down further depending on what you're working on and how—some artists will focus on refining anatomy and then setting down the grayscale of shadows before moving onto color in a very technical manner, others will dive in immediately and correct along the way—but it's also the part that reveals the most about how a programmer thinks and works through problems.

Breaking down the process of developing a web application into steps was absolutely vital to me with this project. To date, this is the project with the most moving parts as assigned by Flatiron. Integrating Rails, Javascript, and HTML into one application for the first time is a big undertaking. My Rails project was about 104 MB - 124 MB in size, but I found the process of making it ironically far simpler than the Javascript project, which is only about 36.6 MB - 40.4 MB and objectively smaller in both scope and files. Integrating three separate languages (Rails, HTML, Javascript) into an application that depended heavily upon each of them was a big challenge but ultimately taught me a lot more about coding and helped me develop as a programmer with their own approach to problem solving.
